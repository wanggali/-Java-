
	
	
	讲内存，讲原理，讲底层，讲封装，讲思想

	int a = 1;		.java  class main

	
	变量存储一个元素，栈里
	数组存储多个元素，堆里(new的空间 不是array)


	变量存储一个元素
	数组存储多个元素		长度是固定的
		未来如果长度总发生变化(添加，删除)


	数组
	面向对象，描述类--对象

	按照书本，固定的流程学------->技术的出现，解决一些问题(从没有解决过，之前解决的不好)
		到这个位置了，新的技术()


	自己设计一个类(描述一个类)		数组---容器	存/取
	能做一些类似数组存取的事情		小弟---容器	做事(方法)---存/取

	ArrayBox适合存储数据长度可变的
		适合遍历---底层就是数组
		不适合插入删除---需要挨个循环移动元素		性能慢


	数据存入了数组里，如果不存入数组里，还有没有其他的容器可以存?????
	对象???---堆内存空间(属性---变量 堆内存)

	多个对象连在一起，都当作我的小弟	
	链表结构----代码实现		LinkedBox



	=====================================
	总结

	站在使用者的角度来思考
	想要存储数据，容器就有好多可用的啦

	变量		一份
	=====================================================
	数组		多份	长度固定(省略空间	插入/删除不方便)
	----------------------------------
	ArrayBox		多份	底层就是数组(看似可变，适合挨个遍历，不适合插入删除)
	LinkedBox	多份	底层是对象(看似可变，适合插入删除，不适合挨个遍历)
	TreeBox

	定义规则(接口，抽象类)




=============================================================================

	JavaSE
		搭建环境JDK  8  11
		常量，变量(编译执行原理，内存的存储机制)
		数据类型的定义	基本/引用
		运算符号		算数/比较/赋值/逻辑/位运算
		语法结构		if，switch，for，while。。。		基础课---小任务
		数组使用		数组底层存储机制和原理，包含二维数组	基础课---底层原理 + 小任务

		面向对象( 的编程思想 )	面向过程，面向对象，面向切面
			*如何描述类(比较难)
				属性
				*方法	(构造)方法     程序块(非常特殊的方法)
			如何创建对象(简单)	new	内存(堆中的空间)
			类中的细节(this ，方法重载)

			ArrayBox的封装(底层原理就是模拟了一个ArrayList)
			1.承上
				面向对象的编程思想(如何描述一个类 属性/方法)
				用到了几乎所有面向对象之前的内容
			2.启下
				学到数组+面向对象的时候，已经开始做未来集合的封装了
				就已经知道什么是集合啦

		面向对象进阶部分( 思想的养成 )
			*如何描述类和类的关系
				继承	泛化(实现)	A is-a B
				聚合	组合	包含	A has-a B
				依赖			A use-a B

				留了很多小任务-----------基础课	学生-机房-电脑	搬家公司-卡车-家具

			类中的特征(不是必须要有的，看情形的/场景的)
				权限修饰符	public protected 默认 private
				特征修饰符	static final abstract
				抽象类，接口，多态
				设计模式

			LinkedBox封装(模拟未来LinkedList集合，容器+双向链表数据结构)
				类和类的关系
				双向链表-----本质一堆对象(引用问题)
				设计模式(类和类的关系，类的特征)
	-----------------------------------------------------------------------------------------------------------------------------------------
		工具类
			数学  日期  包装类
			字符串(String   StringBuilder   StringBuffer)
		集合
			能理解每一个集合的底层原理，未来的应用场景
			最好能有能力，手撕集合
		异常和错误
			
	-----------------------------------------------------------------------------------------------------------------------------------------
	JavaSE(中的进阶部分，如果做一些普通业务开发基本见不到，如果做一些底层架构几乎都会用到)
		File + I/O
			变量，数组-------集合，对象		内存里		数据持久化
			文件???		硬盘
			File(内存上的对象)	-----------	真正硬盘上的一个文件
				文件的结构
				文件的属性
				创建和删除文件
				唯独操作不了的是文件中的内容(需要另一个对象来做事----流)
			I/O	读写文件-----更重要
				FileInputStream	FileOutputStream
				FileReader	FileWriter
				read([])		write([])
				读取文件内容	有一个带内容的数组
				内容存入空数组	数组的内容写到文件

			基于MVC分层思想的设计(考试系统，ATM系统)
				MVC

				V
				C
				M
					Service
					DAO
					domain
				DB

			自己做一个封装----------模拟一个数据库服务(系统)
			带着线程，带着Socket		做一个类似MySQL的数据库系统啦
			客户端		服务端(数据库服务/系统)
				Socket连接
			发送String(SQL)	接收字符串---解析---找到文件---操作()
					如果操作是读出来，结果再写回客户端
			接收写回来的信息
			信息组合成一个对象/容器

			如果多个人同时访问数据库服务		线程安全的问题
							数据库服务中的------事务问题
		线程Thread
			进程 线程 程序
			如何创建
			状态如何切换
			如何控制线程安全的问题		synchronized    volatile
			生产消费者模型
			死锁
			底层机制	线程池	垃圾回收
		反射Reflect
			Class Field Method Constructor
			获取类，获取类的结构，获取类中的成员(属性 方法 构造)
			可以通过给定的一个String就能操作对象啦
			可以创建对象
			可以执行对象的方法
			可以去调用对象的属性 存/取		模拟Spring管理对象的机制IOC+DI
		注解Annotation
			从用法来讲，就是一个@XXX("xxx")
			我们如果只看用法，就没什么研究的价值
			如果我们自己做底层架构的设计，可以自定义注解
			需要用到反射技术才能解析注解里面的内容
		Socket
			TCP	UDP

		利用之前所有的JavaSE知识，去封装一个自己的WEB容器(类似Tomcat这种)
			Client	客户端(桌面应用程序)----单机
			C/S	Client / Server
			B/S	Browser(HTML) / Server
			从浏览器到服务器的请求响应流程
			深入理解B/S模型的架构啦

					统一的协议HTTP
					文本---字符串
			浏览器(客户端)		服务器(服务端)-----Tomcat
						服务器先开启一个服务ServerSocket
			浏览器建立连接Socket
			创建输出流		创建输入流
			发送String			接收String
						解析(String分析)---->找什么资源，带了什么参数
						参考配置web.xml(注解)
						找到一个资源(反射)---->Java类(Servlet)  request response
						Servlet接收请求信息，找一个业务方法去做事(Service---DAO---JDBC)
						如果有响应结果，需要写回浏览器
			读取响应信息Input		写回Output
			解析字符串(HTML)
			展示出来了

	==================================================================================

	MySQL
		SQL	DDL DML DCL DQL TPL
		单表基本操作
		表格的关系，列的约束(外键)
		联合查询(笛卡尔积-等值连接，外连接(左，右)，内连接)
		纵向拼接(交，并，差)
		开发中常用的：主键自增，行列互换
		开发中设计问题：表格之间的关系，单表的设计问题-----------设计范式

		事务及隔离级别
		底层索引
		缓存机制
		锁的机制
		解析引擎

	JDBC	J	DB	C
		Java定义的一套规则，让不同的数据库都能连接同一个Java
		很显然不同的数据库，具体实现不一样
		六部曲
		1.导包(不同的数据库自己提供)
		2.加载驱动类
		*3.获取连接Connection----------理解为是一个socket(Java ------ MySQL)
		4.获取状态参数Statement------理解为是一个I/O流对象(一个人干两份活，既能读又能写)
			PreparedStatement
		5.执行数据库操作
			读	查询	ResultSet = executeQuery	Set<Map<String,Object>>
			写	增删改	int = executeUpdate
		6.资源关闭
			rs.close();
			pstat.close();
			conn.close();

		MVC分层架构思想
			MVC

			V：View
				HTML(CSS+JS)	JSP(Java+HTML)	HTML+AJAX+JSON
			C：Controller
				Servlet(获取请求信息，找业务方法做事，相应信息发会浏览器)
			M：Model
				(模型---数据模型	数据处理Service，数据读写DAO，数据存储domain)
				Service(业务---比较 计算 逻辑。。。)
				DAO(增删改查，I/O，JDBC)		domain
			DB
				文件----MySQL

		JDBC流程做封装
			解决DAO层中代码冗余的问题		ORM(MyBatis)
			解决DAO层中JDBC创建连接的性能问题	数据库连接池(C3P0 DBCP)

	前端技术
		HTML + CSS + JS(JQ)操作都是DOM + VUE操作数据

	WEB容器(Tomcat服务器)
		将所有的资源，都放在这里进行管理
		文件资源(静态HTML)
		操作资源(动态Java结果JSON)

	JavaEE(JavaWEB)	都是WEB容器定义的规则
		请求与响应的流程
		Servlet		单例模式	两个参数Request  Response	底层管理机制  生命周期
		JSP		JSP本质上就是一个Servlet	底层编译原理
		Filter		一个特殊的Servlet		过滤器链(动态代理，责任链设计模式)	AOP面向切面
		Listener		监听器对象		体现观察者设计模式(Observer Pattern)

	AJAX+JSON

		Servlet用来充当项目中的控制层，使用比较恶心
		是Tomcat容器的管理的，遵循规则
			继承，重写，参数，一个类中只有一个方法
			告知Tomcat，将我们自己写的这个Servlet类对象管理起来-------配置web.xml  注解
		封装---------解决Servlet类过多，配置过多		找一个专门的人，负责统一找寻Servlet
		WEB框架(请求，统一调配，统一转发)---------------------SpringMVC

	====================================================================

		V：	HTML+AJAX+JSON		JSP
			统一的Servlet---------------------------------->WEB(SpringMVC)
		C:	Servlet
		M:	Service
			DAO		domain
			JDBC--------------------------------------------->ORM(MyBatis)
		DB:	MySQL
		项目(需求，业务分析)


	框架
	SSM
		Spring(IOC+DI , AOP)	SpringMVC	MyBatis
		项目(需求，业务分析)

	SM
		SpringBoot	MyBatis	Redis	Maven
		项目(需求，业务分析)

	============================================================================

	数据结构 + 算法	太重要了
		

	微服务 + 分布式			很老的技术Hibernate  Struts
		Linux
		Ngnix
		Netty
		Dubbo
		SpringCloud















